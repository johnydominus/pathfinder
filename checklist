using ((depth-first search || breadth-first search) &&  adjacency list);

main(){
    error handling      
        usage                   V
        no file                 V
        empty file              V
        first line              V
        some line               V
        islands num             V            
        
    parse vertices amount;      V
    parse graph &&              V
    create adjacency list;      V
    use pathfinding algorithm;	V
    save right path;		V
    output the path;		V
    free allocated memory;	V
    auditor!                V
    circular dependency     V
    rewrite stack to list
    sort lists
    output paths from lists 
};

adjacency_list {
    nodes {
        vertice {
            name;
            edges {
                vertice_name;
                distance;
            }
        }
        next node;
    }
}
